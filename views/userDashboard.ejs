<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">
    <title>Document</title>
    <style> 
    *{
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
  font-family: 'Roboto', sans-serif;
  align-items: left;
justify-content:left;


}
section{
min-height: 100vh;
background: #dbd1d1;
background-repeat: no-repeat ;
background-size: cover;

}
.container{
   width: 85%;
   margin: auto;

}
nav{
    height: 80px;
    background-color: #333;
}
nav h1{
float: left;
line-height: 80px;
font-size: 20px;
font-size: inline;
color: #fff;

}
nav ul{
    float: right;
    line-height: 80px;

}
nav ul li{
display: inline-block;
list-style: none;
padding: 0px 30px;

}
nav ul li a{
color: aquamarine;
text-decoration: none;
text-transform: uppercase;
border-radius: 5px;
}
nav ul li a:hover{
background-color: rgb(89, 0, 255);
transition: 0.5s ease;

}
nav ul li .active{
 background-color:rgb(89, 0, 255) ;
}
/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  padding-top: 100px; /* Location of the box */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

/* The Close Button */
.close {
  color: #aaaaaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

.box {
    width: 600px;
background:transparent;
border: 2px solid rgba(225, 225,225, .2);
backdrop-filter: blur(20px);
box-shadow: 0 0 10px rgba(0, 0,0, .2);
color: aliceblue;
border-radius: 10px;
padding: 150px 200px;
align-items: left;
justify-content:left;
}


* {
            margin: 0;
            padding: 0;
            font-family: 'Poppins', sans-serif;
        }
        
        body {
            
            
            min-height: 100vh;
            padding: 10px 30px;
            align-items: right;
            justify-content: right;
        }
        
        .calendar-container {
            background:transparent;
            width: 450px;
            border-radius: 10px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
        }
        
        .calendar-container header {
            display: flex;
            align-items: center;
            padding: 25px 30px 10px;
            justify-content: space-between;
        }
        
        header .calendar-navigation {
            display: flex;
        }
        
        header .calendar-navigation span {
            height: 38px;
            width: 38px;
            margin: 0 1px;
            cursor: pointer;
            text-align: center;
            line-height: 38px;
            border-radius: 50%;
            user-select: none;
            color: #aeabab;
            font-size: 1.9rem;
        }
        
        .calendar-navigation span:last-child {
            margin-right: -10px;
        }
        
        header .calendar-navigation span:hover {
            background: #f2f2f2;
        }
        
        header .calendar-current-date {
            font-weight: 500;
            font-size: 1.45rem;
        }
        
        .calendar-body {
            padding: 20px;
        }
        
        .calendar-body ul {
            list-style: none;
            flex-wrap: wrap;
            display: flex;
            text-align: center;
        }
        
        .calendar-body .calendar-dates {
            margin-bottom: 20px;
        }
        
        .calendar-body li {
            width: calc(100% / 7);
            font-size: 1.07rem;
            color: #414141;
        }
        
        .calendar-body .calendar-weekdays li {
            cursor: default;
            font-weight: 500;
        }
        
        .calendar-body .calendar-dates li {
            margin-top: 30px;
            position: relative;
            z-index: 1;
            cursor: pointer;
        }
        
        .calendar-dates li.inactive {
            color: #aaa;
        }
        
        .calendar-dates li.active {
            color: #fff;
        }
        
        .calendar-dates li::before {
            position: absolute;
            content: "";
            z-index: -1;
            top: 50%;
            left: 50%;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }
        
        .calendar-dates li.active::before {
            background: #6332c5;
        }
        
        .calendar-dates li:not(.active):hover::before {
            background: #e4e1e1;
        }
    </style>
</head>
<body>
    <h2 style="text-align:center ;">WELCOME CASEY</h2>
    <section>
        <div class="container">
    <nav>
<h1>Dashboard</h1>
<ul>
  <li><a href="" class="active">home</a></li>
  <li><a href="ApplicationForm.html">Apply</a></li>
  <button id="myBtn">Track application</button>

</div>

<!-- The Modal -->
<div id="myModal" class="modal">

  <!-- Modal content -->
  <div class="modal-content">
    <span class="close">&times;</span>
    <p>application status goes in here</p>
  </div>

</div>

</ul><br><br><br><br><br><br><br>


</div>
<div class="calendar-container">
    <header class="calendar-header">
        <p class="calendar-current-date"></p>
        <div class="calendar-navigation">
            <span id="calendar-prev" class="material-symbols-rounded">chevron_left</span>
            <span id="calendar-next" class="material-symbols-rounded">chevron_right</span>
        </div>
    </header>
    <div class="calendar-body">
        <ul class="calendar-weekdays">
            <li>Sun</li>
            <li>Mon</li>
            <li>Tue</li>
            <li>Wed</li>
            <li>Thu</li>
            <li>Fri</li>
            <li>Sat</li>
        </ul>
        <ul class="calendar-dates"></ul>
    </div>

</div>


</body>




<script>
// Get the modal
var modal = document.getElementById("myModal");

// Get the button that opens the modal
var btn = document.getElementById("myBtn");

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks the button, open the modal 
btn.onclick = function() {
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

let date=new Date(); // creates a new date object with the current date and time
        let year=date.getFullYear(); // gets the current year
        let month=date.getMonth(); // gets the current month (index based, 0-11)
        
        const day=document.querySelector(".calendar-dates"); // selects the element with class "calendar-dates"
        const currdate=document.querySelector(".calendar-current-date"); // selects the element with class "calendar-current-date"
        const prenexIcons=document.querySelectorAll(".calendar-navigation span"); // selects all elements with class "calendar-navigation span"
        
        const months=[
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"]; // array of month names
        
        // function to generate the calendar
        const manipulate=()=> {
            // get the first day of the month
            let dayone=new Date(year, month, 1).getDay();
        
            // get the last date of the month
            let lastdate=new Date(year, month + 1, 0).getDate();
        
            // get the day of the last date of the month
            let dayend=new Date(year, month, lastdate).getDay();
        
            // get the last date of the previous month
            let monthlastdate=new Date(year, month, 0).getDate();
        
            let lit=""; // variable to store the generated calendar HTML
        
            // loop to add the last dates of the previous month
            for (let i=dayone; i > 0; i--) {
        lit+=`<li class="inactive">${monthlastdate - i + 1}</li>`;
            }
        
            // loop to add the dates of the current month
            for (let i=1; i <=lastdate; i++) {
        // check if the current date is today
        let isToday=i===date.getDate() && month===new Date().getMonth() && year===new Date().getFullYear() ? "active": "";
        lit+=`<li class="${isToday}">${i}</li>`;
            }
        
            // loop to add the first dates of the next month
            for (let i=dayend; i < 6; i++) {
        lit+=`<li class="inactive">${i - dayend + 1}</li>`
            }
        
            // update the text of the current date element with the formatted current month and year
            currdate.innerText=`${months[month]} ${year}`;
        
            // update the HTML of the dates element with the generated calendar
            day.innerHTML=lit;
        }
        
        manipulate();
        
        // Attach a click event listener to each icon
        prenexIcons.forEach(icon=> {
        
        // When an icon is clicked
        icon.addEventListener("click", ()=> {
                // Check if the icon is "calendar-prev" or "calendar-next"
                month=icon.id==="calendar-prev" ? month - 1 : month + 1;
        
                // Check if the month is out of range
                if (month < 0 || month > 11) {
                    // Set the date to the first day of the month with the new year
                    date=new Date(year, month, new Date().getDate());
                    // Set the year to the new year
                    year=date.getFullYear();
                    // Set the month to the new month
                    month=date.getMonth();
                }
        
                else {
                    // Set the date to the current date
                    date=new Date();
                }
        
                // Call the manipulate function to update the calendar display
                manipulate();
            });
            });

</script>
</html>